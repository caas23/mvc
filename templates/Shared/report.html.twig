{% extends "Shared/base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block body %}
    <h1>Redovisning</h1>
    <div class="container-report">
        <div>
            <h3 id="kmom01">Kmom01</h3>
            <p>
                <strong>Förkunskaper</strong><br>
                <p>
                    Mina förkunskaper kring objektorientering sträcker sig enbart till tidigare kurser under utbildningen,
                    där kanske oopython varit den som gett mest insikt i det. I början av den kursen kändes det ganska rörigt och det var 
                    inte helt lätt att greppa konceptet, men nu när jag hunnit bekanta mig med det känns det som att det sjunkit in något.
                </p>

                <strong>Objekt och klasser i PHP</strong><br>
                <p>
                    För att komma igång med att skapa en klass i PHP behöver man ha lite koll på objekt i PHP.
                    Ett objekt kan skapas utifrån en fördefinierad klass, eller utifrån en egendefinierad sådan (vilket görs med hjälp av nyckelorder <code>class</code>). 
                    För att skapa ett nytt objekt används nyckelordet <code>new</code> och för att lägga till properties till ett objekt används
                    <code>objekt -> property = tilldelning</code>.<br>
                    Inom en klass definieras medlemsvariabler, vilka kan vara till exempel publika eller privata. 
                    Om variablerna är privata behövs set- och get-metoder för att hantera dem, vilket är ett ganska vanligt 
                    sätt att hantera medlemsvariabler - att ha privata metoder har flera fördelar gentemot publika sådana.<br>
                    Givetvis finns flera andra delar, som inte berörts här, men kort sagt behövs förståelse för hur en klass skapas,
                    hur medlemsvariabler och metoder används och hanteras, hur objekt instansieras och hur tilldelning sker.<br><br>
                </p>

                <strong>Kodbasen</strong><br>
                <p>
                    Angående kodbasen - initialt var reaktionen "Oj, här finns en hel del att sätta sig in i." Men efter att ha arbetat igenom
                    guiden, mer eller mindre en och en halv gång (på grund av en fadäs), klarnade många delar. Jag insåg att jag faktiskt är bekant
                    med många av delarna - jag har ju tidigare stött på json, php, css, twig och så vidare. Känslan nu efter att ha arbetat igenom
                    första kursmomentet är att jag känner mig hyfsat trygg i den övergripande bild jag fått av kodbasen och strukturen.<br><br>
                </p>

                <strong>PHP The Right Way</strong><br>
                <p>
                    Här ska jag väl vara ärlig och säga att jag har inte läst den "pärm till pärm" så att säga, men utifrån huvudrubrikerna
                    i början av artikeln har jag tittat lite mer på Code Style Guide och Coding Practices för att få en insikt kring dessa delar. Utöver dessa
                    läste jag även mer om Templating, eftersom vi redan kommit igång och arbetar med detta i kursen. Slutligen la jag lite extra tid på Testing-avsnittet
                    eftersom jag i inledningen av kursen sett att vi kommer beröra tester. I PHP? Det vet jag inte än, men jag tänker att det kan vara värdelfullt att ha
                    ögnat igenom detta avsnitt oavsett.<br><br>
                </p>

                <strong>TIL</strong><br>
                <p>
                    - Hur grundstrukturen för klasser och objekt ser ut i PHP.<br>
                    - Att CSS stödjer nesting! Det hade jag missat och med den vetskapen kunde jag justera min CSS-kod lite.<br>
                    - Hur en variabel kan inkluderas i bildkällan i en img-tag i en Twig-fil. Detta var något jag tänkte att det borde ju gå, 
                    men att faktiskt implementera det i denna specifika situation krävde att jag vände mig till dokumentation för vägledning.
                </p>
            </p>
        </div>
        <div>
            <h3 id="kmom02">Kmom02</h3>
            <p>
                <strong>Arv</strong><br>
                    <p>
                        Arv innebär att en klass ärver från en annan klass, och därmed kan utnyttja de metoder som finns i förälderklassen. Ett exempel
                        från uppgiften är kortleken med jokrar, som ärver från kortleken utan jokrar men även utökar denna för att få in jokrarna.
                    </p>

                <strong>Komposition</strong><br>
                    <p>
                        Komposition kan beskrivas som en "har en"-relation. Denna typ av relation är av stark karaktär, där subklassen inte kan existera på egen hand.
                        Ett exempel från uppgiften är en korthand, som ju är beroende av kort för att kunna existera.
                    </p>

                <strong>Interface</strong><br>
                    <p>
                        Ett interface kan ses om en uppsättning regler, eller krav, som en klass måste uppfylla. Om en klass implementerar ett interface
                        så innebär det att den klassen kommer att innehålla de metoder som specificerats i interfacet.
                    </p>

                <strong>Trait</strong><br>
                    <p>
                        Trait kan ses som ett alternativ till multipelt arv (som inte är möjligt i PHP), där en klass kan använda ett eller flera trait(s). 
                        Trait kan återanvändas i flera klasser och kan beskrivas som moduler som finns på en plats men som kan nyttjas på flera.  
                    </p>

                <strong>Implemenation av uppgiften</strong><br>
                <p>
                    Jag är generellt nöjd med hur jag löst uppgiften, men ser att delar av koden blir densamma för kortleken utan jokrar som med den med jokrar.
                    Här hade jag troligen kunnat göra koden mer DRY och snygga till det hela men då timmen är sen och deadline är runt hörnet, 
                    har jag låtit den vara så som den är för stunden.<br>
                    En del jag fastnade på och som tog ett tag att komma förbi, var sessionsdelen, inte just att spara och hämta från sesssionen, men att skriva ut de
                    delar som kändes relevanta i <code>/session</code>, och att få fram flashmeddelandet på rätt plats när sessionen tömts.<br>
                    Utöver detta var jag inte helt säker på hur <code>/card/deck/draw/:number</code> och <code>/card/deck/deal/:players/:cards</code> förväntades fungera.
                    Detta ledde till att jag gjorde en av vardera möjlighet jag såg, den förstnämnda går via ett POST-formulär och den andra, med både spelare och kort
                    går direkt via URL:en. Naturligtvis hade jag kunnat be om ett förtydligande, men landade i att göra en av vardera.  
                </p>
                
                <strong>Reflektioner</strong><br>
                <p>
                    Den spontana reflektionen är att det är otroligt roligt att hålla på med, men även en hel del att hålla koll på och sätta sig in i. 
                    Samtidigt får jag känsla av att om man bara får grepp om det så finns det en tydlig struktur och det finns ett tankemönster att förhålla
                    sig till. Så min reflektion är egentligen att det är bara att gnugga på, googla nya koncept och dylikt för att försöka få grepp om sådant
                    som känns nytt och obekant.
                </p>

                <strong>TIL</strong><br>
                <p>
                    Att vid hinder ta det lugnt, ta ett steg tillbaka och fundera;<br>
                     - Var i kedjan verkar felet uppstå?<br>
                     - Hur kan jag "testa" om felet finns där jag tror och hur kan jag börjar åtgärda det?<br>
                    I till exempel Python är jag van att kunna nyttja Thonny och stega genom delar, men här drog jag istället
                    nytta av sessionen och skickade med diverse värden för att se, vad är värdet i denna stund och är det som jag förväntar mig?
                </p>
            </p>
        </div>
        <div>
            <h3 id="kmom03">Kmom03</h3>
            <p>
                Redovisningstext för detta kmom kommer här.
            </p>
        </div>
        <div>
            <h3 id="kmom04">Kmom04</h3>
            <p>
                Redovisningstext för detta kmom kommer här.
            </p>
        </div>
        <div>
            <h3 id="kmom05">Kmom05</h3>
            <p>
                Redovisningstext för detta kmom kommer här.
            </p>
        </div>
        <div>
            <h3 id="kmom06">Kmom06</h3>
            <p>
                Redovisningstext för detta kmom kommer här.
            </p>
        </div>
        <div>
            <h3 id="kmom07-10" >Kmom07-10</h3>
            <p>
                Redovisningstext för detta kmom kommer här.
            </p>
        </div>
    </div>
{% endblock %}